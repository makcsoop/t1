import os
import logging
import pandas as pd
from datetime import datetime, timedelta
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler
)
import psycopg2
from dotenv import load_dotenv
import schedule
import time
import threading

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8328066857:AAH9cheGTamRTWrg7IVVdv7zopLEEjhs7xY"  # –í–°–¢–ê–í–¨–¢–ï –í–ê–® –¢–û–ö–ï–ù –ó–î–ï–°–¨
DATABASE_URL = "postgresql://username:password@localhost:5432/sites_monitoring"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ENTER_URL, SELECT_FAVORITE = range(2)  # –£–ü–†–û–°–¢–ò–õ–ò –¥–∏–∞–ø–∞–∑–æ–Ω —Å–æ—Å—Ç–æ—è–Ω–∏–π


def get_db_connection():
    try:
        conn = psycopg2.connect(DATABASE_URL)
        return conn
    except Exception as e:
        logger.error(f"Database connection error: {e}")
        raise


def init_db():
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('''
        CREATE TABLE IF NOT EXISTS sites (
            id SERIAL PRIMARY KEY,
            url TEXT UNIQUE NOT NULL,
            name TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        ''')

        cursor.execute('''
        CREATE TABLE IF NOT EXISTS metrics (
            id SERIAL PRIMARY KEY,
            site_id INTEGER REFERENCES sites(id) ON DELETE CASCADE,
            uptime REAL,
            lcp REAL,
            inp REAL,
            cls REAL,
            checked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        ''')

        cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_favorites (
            id SERIAL PRIMARY KEY,
            user_id BIGINT,
            site_id INTEGER REFERENCES sites(id) ON DELETE CASCADE,
            UNIQUE(user_id, site_id)
        )
        ''')

        conn.commit()
        cursor.close()
        conn.close()
        logger.info("Database initialized successfully")
    except Exception as e:
        logger.error(f"Database initialization error: {e}")


def execute_query(query, params=None, fetch=False, fetchall=False):
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute(query, params or ())

        if fetch:
            result = cursor.fetchone()
        elif fetchall:
            result = cursor.fetchall()
        else:
            result = None

        conn.commit()
        return result

    except Exception as e:
        logger.error(f"Query execution error: {e}")
        if 'conn' in locals():
            conn.rollback()
        raise
    finally:
        if 'cursor' in locals():
            cursor.close()
        if 'conn' in locals():
            conn.close()


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu_keyboard():
    keyboard = [
        [KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∞–π—Ç"), KeyboardButton("–£–ø—Ä. –∏–∑–±—Ä–∞–Ω–Ω—ã–º")],

        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: 2 –∫–Ω–æ–ø–∫–∏
        [KeyboardButton("–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç"), KeyboardButton("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")],
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


# –ú–µ–Ω—é –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–π—Ç–∞
def get_check_site_keyboard():
    keyboard = [
        [InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç", callback_data="enter_url")],
        [InlineKeyboardButton("–ò–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data="check_favorite")],
        [InlineKeyboardButton("‚Ü©–ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)


# –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã–º
def get_favorites_keyboard():
    keyboard = [
        [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data="list_favorites")],
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="add_to_favorites")],
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data="remove_from_favorites")],
        [InlineKeyboardButton("‚Ü©–ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)


# –ú–µ–Ω—é –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
def get_max_site_keyboard():
    keyboard = [
        [InlineKeyboardButton("–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –æ—Ç—á—ë—Ç", callback_data="full_report")],
        [InlineKeyboardButton("–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", callback_data="export_excel")],
        [InlineKeyboardButton("–ì—Ä–∞—Ñ–∏–∫–∏", callback_data="show_charts")],
        [InlineKeyboardButton("‚Ü©–ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)


# –ú–µ–Ω—é –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∞–π—Ç–∞
def get_single_site_keyboard():
    keyboard = [
        [InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫", callback_data="check_history")],
        [InlineKeyboardButton("–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞", callback_data="quick_check")],
        [InlineKeyboardButton("–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="schedule_check")],
        [InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫", callback_data="save_to_list")],
        [InlineKeyboardButton("‚Ü©–ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)


# –ú–µ–Ω—é –¥–ª—è –º–Ω–æ–≥–∏—Ö —Å–∞–π—Ç–æ–≤
def get_multi_site_keyboard():
    keyboard = [
        [InlineKeyboardButton("–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞", callback_data="summary_table")],
        [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤", callback_data="sites_list")],
        [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ", callback_data="check_all")],
        [InlineKeyboardButton("–ì—Ä—É–ø–ø–æ–≤–æ–π —ç–∫—Å–ø–æ—Ä—Ç", callback_data="batch_export")],
        [InlineKeyboardButton("‚Ü©–ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)


# –ú–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def get_notifications_keyboard():
    keyboard = [
        [InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="setup_notifications")],
        [InlineKeyboardButton("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫", callback_data="scheduler")],
        [InlineKeyboardButton("‚Ü©–ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ URL
async def enter_url(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = update.message.text
    if not url.startswith(('http://', 'https://')):
        url = 'https://' + url

    await perform_site_check(update, url)
    return ConversationHandler.END


# –û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.",
        reply_markup=get_main_menu_keyboard()
    )
    return ConversationHandler.END


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "–°—Ç–∞—Ä—Ç":
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∞–π—Ç–æ–≤!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            reply_markup=get_main_menu_keyboard()
        )

    elif text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∞–π—Ç":
        await update.message.reply_text(
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∞–π—Ç\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Ä–∫–∏:",
            reply_markup=get_check_site_keyboard()
        )

    elif text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–º":
        await update.message.reply_text(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–º\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_favorites_keyboard()
        )

    elif text == "–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç":
        await update.message.reply_text(
            "–ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç—á–µ—Ç—ã\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
            reply_markup=get_max_site_keyboard()
        )

    elif text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π":
        await update.message.reply_text(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:",
            reply_markup=get_notifications_keyboard()
        )

    elif text == "–ï—Å–ª–∏ 1 —Å–∞–π—Ç":
        await update.message.reply_text(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–∏–º —Å–∞–π—Ç–æ–º\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_single_site_keyboard()
        )

    elif text == "–ï—Å–ª–∏ –º–Ω–æ–≥–æ —Å–∞–π—Ç–æ–≤":
        await update.message.reply_text(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Å–∞–π—Ç–æ–≤\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_multi_site_keyboard()
        )


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø ‚Äî PingTower, —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É —Å–∞–π—Ç–æ–≤.\n\n"
        "–Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é:\n"
"üü¢ Uptime –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å\n"
"‚ö°Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ (LCP, FCP, SI)\n"
"üñ± –û—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å (INP, TBT)\n"
"üß± –í–∏–∑—É–∞–ª—å–Ω—É—é —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (CLS)\n"
"üîê SSL –∏ DNS",
        reply_markup=get_main_menu_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "main_menu":
        await query.edit_message_text(
          #  "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=None
        )
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
            reply_markup=get_main_menu_keyboard()
        )
    

    elif query.data == "enter_url":
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å—Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n"
            "–ü—Ä–∏–º–µ—Ä: https://example.com\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Ü©–ù–∞–∑–∞–¥", callback_data="check_site_back")]])
        )
        return ENTER_URL

    elif query.data == "check_favorite":
        user_id = query.from_user.id
        favorites = execute_query(
            "SELECT s.id, s.name FROM sites s JOIN user_favorites uf ON s.id = uf.site_id WHERE uf.user_id = %s",
            (user_id,),
            fetchall=True
        )

        if not favorites:
            await query.edit_message_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤.",
                reply_markup=get_check_site_keyboard()
            )
            return

        keyboard = []
        for site_id, name in favorites:
            keyboard.append([InlineKeyboardButton(name, callback_data=f"check_fav_{site_id}")])
        keyboard.append([InlineKeyboardButton("‚Ü©–ù–∞–∑–∞–¥", callback_data="check_site_back")])

        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–π—Ç –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data.startswith("check_fav_"):
        site_id = int(query.data.split("_")[2])
        result = execute_query("SELECT url FROM sites WHERE id = %s", (site_id,), fetch=True)
        if result:
            await perform_site_check(query, result[0], site_id)

    elif query.data == "check_site_back":
        await query.edit_message_text(
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∞–π—Ç\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Ä–∫–∏:",
            reply_markup=get_check_site_keyboard()
        )

    elif query.data == "list_favorites":
        user_id = query.from_user.id
        favorites = execute_query(
            "SELECT s.name, s.url FROM sites s JOIN user_favorites uf ON s.id = uf.site_id WHERE uf.user_id = %s",
            (user_id,),
            fetchall=True
        )

        if not favorites:
            await query.edit_message_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤.",
                reply_markup=get_favorites_keyboard()
            )
            return

        message = "–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–∞–π—Ç—ã:\n\n"
        for name, url in favorites:
            message += f"‚Ä¢ {name} ({url})\n"

        await query.edit_message_text(
            message,
            reply_markup=get_favorites_keyboard()
        )

    elif query.data == "add_to_favorites":
        sites = execute_query("SELECT id, name FROM sites", fetchall=True)

        if not sites:
            await query.edit_message_text(
                "–ù–µ—Ç —Å–∞–π—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.",
                reply_markup=get_favorites_keyboard()
            )
            return

        keyboard = []
        for site_id, name in sites:
            keyboard.append([InlineKeyboardButton(name, callback_data=f"add_fav_{site_id}")])
        keyboard.append([InlineKeyboardButton("‚Ü©–ù–∞–∑–∞–¥", callback_data="favorites_back")])

        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–π—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data.startswith("add_fav_"):
        site_id = int(query.data.split("_")[2])
        user_id = query.from_user.id

        execute_query(
            "INSERT INTO user_favorites (user_id, site_id) VALUES (%s, %s) ON CONFLICT DO NOTHING",
            (user_id, site_id)
        )

        await query.edit_message_text(
            "–°–∞–π—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!",
            reply_markup=get_favorites_keyboard()
        )

    elif query.data == "favorites_back":
        await query.edit_message_text(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–º\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_favorites_keyboard()
        )

    elif query.data == "full_report":
        await generate_full_report(query)

    elif query.data == "export_excel":
        await export_to_excel(query)

    elif query.data == "check_history":
        await show_check_history(query)

    elif query.data == "quick_check":
        await quick_site_check(query)

    elif query.data == "summary_table":
        await show_summary_table(query)

    elif query.data == "check_all":
        await check_all_sites(query)

    else:
        await query.edit_message_text(
            "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.",
            reply_markup=get_main_menu_keyboard()
        )


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–π—Ç–∞
async def perform_site_check(update, url, site_id=None):
    try:
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        import random
        metrics = {
            'uptime': round(random.uniform(99.5, 100.0), 2),
            'lcp': round(random.uniform(0.5, 3.0), 1),
            'inp': random.randint(50, 200),
            'cls': round(random.uniform(0.01, 0.2), 2)
        }

        if site_id:
            execute_query(
                "INSERT INTO metrics (site_id, uptime, lcp, inp, cls) VALUES (%s, %s, %s, %s, %s)",
                (site_id, metrics['uptime'], metrics['lcp'], metrics['inp'], metrics['cls'])
            )

        report = f" {url}\n"
        report += f"–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%H:%M')}\n"
        report += f"Uptime: {metrics['uptime']}%\n"
        report += f"LCP: {metrics['lcp']}s\n"
        report += f"INP: {metrics['inp']}ms\n"
        report += f"CLS: {metrics['cls']}\n"

        keyboard = [
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"add_fav_{site_id or 'new'}")],
            [InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="full_report")],
            [InlineKeyboardButton("‚Ü©–ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]

        if hasattr(update, 'edit_message_text'):
            await update.edit_message_text(report, reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await update.message.reply_text(report, reply_markup=InlineKeyboardMarkup(keyboard))

    except Exception as e:
        logger.error(f"Error in site check: {e}")


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def generate_full_report(query):
    await query.edit_message_text(
        "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç...",
        reply_markup=get_max_site_keyboard()
    )


async def export_to_excel(query):
    await query.edit_message_text(
        "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é –≤ Excel...",
        reply_markup=get_max_site_keyboard()
    )


async def show_check_history(query):
    await query.edit_message_text(
        "–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫...",
        reply_markup=get_single_site_keyboard()
    )


async def quick_site_check(query):
    await query.edit_message_text(
        "–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...",
        reply_markup=get_single_site_keyboard()
    )


async def show_summary_table(query):
    await query.edit_message_text(
        "–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞...",
        reply_markup=get_multi_site_keyboard()
    )


async def check_all_sites(query):
    await query.edit_message_text(
        "–ü—Ä–æ–≤–µ—Ä—è—é –≤—Å–µ —Å–∞–π—Ç—ã...",
        reply_markup=get_multi_site_keyboard()
    )


def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not BOT_TOKEN:
        print("–û–®–ò–ë–ö–ê: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ!")
        return

    try:
        # –ü—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            init_db()
        except Exception as e:
            print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î: {e}")
            print("‚ö†Ô∏è  –ë–æ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder().token(BOT_TOKEN).build()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler –¥–ª—è –≤–≤–æ–¥–∞ URL
        conv_handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(button_handler, pattern='^enter_url$')],
            states={
                ENTER_URL: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_url)],
            },
            fallbacks=[CommandHandler('cancel', cancel)]
        )

        application.add_handler(CommandHandler("start", start))
        application.add_handler(conv_handler)
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_handler(CallbackQueryHandler(button_handler))

        print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –º–µ–Ω—é...")
        application.run_polling()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")


if __name__ == '__main__':
    main()
